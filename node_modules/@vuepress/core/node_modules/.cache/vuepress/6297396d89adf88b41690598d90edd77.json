{"remainingRequest":"C:\\Users\\fangjunrui\\Desktop\\vuepress-plugin-game\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\fangjunrui\\Desktop\\vuepress-plugin-game\\src\\game.vue?vue&type=style&index=0&id=59a3f76a&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\fangjunrui\\Desktop\\vuepress-plugin-game\\src\\game.vue","mtime":1622014736928},{"path":"C:\\Users\\fangjunrui\\Desktop\\vuepress-plugin-game\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\fangjunrui\\Desktop\\vuepress-plugin-game\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\fangjunrui\\Desktop\\vuepress-plugin-game\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\fangjunrui\\Desktop\\vuepress-plugin-game\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\fangjunrui\\Desktop\\vuepress-plugin-game\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCnN2ZyB7CiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiAxMDAlOwogIHBvc2l0aW9uOiBmaXhlZDsKICB0b3A6IDE1JTsKICBsZWZ0OiAxOCU7CiAgei1pbmRleDogOTk7CiAgcG9pbnRlci1ldmVudHM6IG5vbmUKfQoKc3BhbiB7CiAgY29sb3I6IHdoaXRlOwogIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmOwogIG9wYWNpdHk6IC4zOwp9CgouemhlemhhbyB7CiAgd2lkdGg6IDM0MHB4OwogIGhlaWdodDogNTAwcHg7CiAgcG9zaXRpb246IGZpeGVkOwogIHRvcDogNTAwcHg7CiAgbGVmdDogMzIwcHg7Cn0K"},{"version":3,"sources":["game.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"game.vue","sourceRoot":"src","sourcesContent":["<template>\r\n  <div>\r\n    <svg id=\"game\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1200 400\" overflow=\"visible\">\r\n      <linearGradient id=\"ArcGradient\">\r\n        <stop offset=\"0\" stop-color=\"#fff\" stop-opacity=\".2\" />\r\n        <stop offset=\"50%\" stop-color=\"#fff\" stop-opacity=\"0\" />\r\n      </linearGradient>\r\n      <path id=\"arc\" fill=\"none\" stroke=\"url(#ArcGradient)\" stroke-width=\"4\" d=\"M100,250c250-400,550-400,800,0\"\r\n        pointer-events=\"none\" />\r\n      <defs>\r\n        <g id=\"arrow\">\r\n          <line x2=\"60\" fill=\"none\" stroke=\"#888\" stroke-width=\"2\" />\r\n          <polygon fill=\"#888\" points=\"64 0 58 2 56 0 58 -2\" />\r\n          <polygon fill=\"#88ce02\" points=\"2 -3 -4 -3 -1 0 -4 3 2 3 5 0\" />\r\n        </g>\r\n      </defs>\r\n      <g id=\"target\">\r\n        <path fill=\"#FFF\"\r\n          d=\"M924.2,274.2c-21.5,21.5-45.9,19.9-52,3.2c-4.4-12.1,2.4-29.2,14.2-41c11.8-11.8,29-18.6,41-14.2 C944.1,228.3,945.7,252.8,924.2,274.2z\" />\r\n        <path fill=\"#F4531C\"\r\n          d=\"M915.8,265.8c-14.1,14.1-30.8,14.6-36,4.1c-4.1-8.3,0.5-21.3,9.7-30.5s22.2-13.8,30.5-9.7 C930.4,235,929.9,251.7,915.8,265.8z\" />\r\n        <path fill=\"#FFF\"\r\n          d=\"M908.9,258.9c-8,8-17.9,9.2-21.6,3.5c-3.2-4.9-0.5-13.4,5.6-19.5c6.1-6.1,14.6-8.8,19.5-5.6 C918.1,241,916.9,250.9,908.9,258.9z\" />\r\n        <path fill=\"#F4531C\"\r\n          d=\"M903.2,253.2c-2.9,2.9-6.7,3.6-8.3,1.7c-1.5-1.8-0.6-5.4,2-8c2.6-2.6,6.2-3.6,8-2 C906.8,246.5,906.1,250.2,903.2,253.2z\" />\r\n      </g>\r\n      <g id=\"bow\" fill=\"none\" stroke-linecap=\"round\" vector-effect=\"non-scaling-stroke\" pointer-events=\"none\">\r\n        <polyline fill=\"none\" stroke=\"#ddd\" stroke-linecap=\"round\" points=\"88,200 88,250 88,300\" />\r\n        <path fill=\"none\" stroke=\"#88ce02\" stroke-width=\"3\" stroke-linecap=\"round\"\r\n          d=\"M88,300 c0-10.1,12-25.1,12-50s-12-39.9-12-50\" />\r\n      </g>\r\n      <g class=\"arrow-angle\">\r\n        <use x=\"100\" y=\"250\" xlink:href=\"#arrow\" />\r\n      </g>\r\n      <clipPath id=\"mask\">\r\n        <polygon opacity=\".5\" points=\"0,0 1500,0 1500,200 970,290 950,240 925,220 875,280 890,295 920,310 0,350\"\r\n          pointer-events=\"none\" />\r\n      </clipPath>\r\n      <g class=\"arrows\" clip-path=\"url(#mask)\" pointer-events=\"none\">\r\n      </g>\r\n      <g class=\"miss\" fill=\"#aaa\" opacity=\"0\" transform=\"translate(0, 100)\">\r\n        <path d=\"M358 194L363 118 386 120 400 153 416 121 440 119 446 203 419 212 416 163 401 180 380 160 381 204\" />\r\n        <path d=\"M450 120L458 200 475 192 474 121\" />\r\n        <path d=\"M537 118L487 118 485 160 515 162 509 177 482 171 482 193 529 199 538 148 501 146 508 133 537 137\" />\r\n        <path d=\"M540 202L543 178 570 186 569 168 544 167 546 122 590 116 586 142 561 140 560 152 586 153 586 205\" />\r\n        <path d=\"M595,215l5-23l31,0l-5,29L595,215z M627,176l13-70l-41-0l-0,70L627,176z\" />\r\n      </g>\r\n      <g class=\"bullseye\" fill=\"#F4531C\" opacity=\"0\">\r\n        <path\r\n          d=\"M322,159l15-21l-27-13l-32,13l15,71l41-14l7-32L322,159z M292,142h20l3,8l-16,8 L292,142z M321,182l-18,9l-4-18l23-2V182z\" />\r\n        <path d=\"M340 131L359 125 362 169 381 167 386 123 405 129 392 183 351 186z\" />\r\n        <path d=\"M413 119L402 188 450 196 454 175 422 175 438 120z\" />\r\n        <path d=\"M432 167L454 169 466 154 451 151 478 115 453 113z\" />\r\n        <path d=\"M524 109L492 112 466 148 487 155 491 172 464 167 463 184 502 191 513 143 487 141 496 125 517 126z\" />\r\n        <path d=\"M537 114L512 189 558 199 566 174 533 175 539 162 553 164 558 150 543 145 547 134 566 148 575 124z\" />\r\n        <path d=\"M577 118L587 158 570 198 587 204 626 118 606 118 598 141 590 112z\" />\r\n        <path d=\"M635 122L599 198 643 207 649 188 624 188 630 170 639 178 645 162 637 158 649 143 662 151 670 134z\" />\r\n        <path d=\"M649,220l4-21l28,4l-6,25L649,220z M681,191l40-79l-35-8L659,184L681,191z\" />\r\n      </g>\r\n      <g class=\"hit\" fill=\"#ffcc00\" opacity=\"0\" transform=\"translate(180, -80) rotate(12) \">\r\n        <path d=\"M383 114L385 195 407 191 406 160 422 155 418 191 436 189 444 112 423 119 422 141 407 146 400 113\" />\r\n        <path d=\"M449 185L453 113 477 112 464 186\" />\r\n        <path d=\"M486 113L484 130 506 130 481 188 506 187 520 131 540 135 545 119\" />\r\n        <path d=\"M526,195l5-20l22,5l-9,16L526,195z M558,164l32-44l-35-9l-19,51L558,164z\" />\r\n      </g>\r\n      <!-- \t<line x1= \"875\", y1= \"280\", x2= \"925\", y2= \"220\" stroke=\"red\"/>\r\n\r\n      <circle class=\"point\" r=\"7\" fill=\"purple\" opacity=\".4\"/> -->\r\n    </svg>\r\n    <div class=\"zhezhao\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        svg: null,\r\n        cursor: null,\r\n        arrows: null,\r\n        zhezhao: null,\r\n        randomAngle: 0,\r\n        target: { // center of target\r\n          x: 900,\r\n          y: 249.5\r\n        },\r\n        lineSegment: { // target intersection line segment\r\n          x1: 875,\r\n          y1: 280,\r\n          x2: 925,\r\n          y2: 220\r\n        },\r\n        pivot: { // bow rotation point\r\n          x: 100,\r\n          y: 250\r\n        }\r\n      }\r\n    },\r\n    mounted() {\r\n      this.svg = document.querySelector(\"svg\")\r\n      this.cursor = this.svg.createSVGPoint()\r\n      this.arrows = document.querySelector(\".arrows\")\r\n      this.zhezhao = document.querySelector(\".zhezhao\")\r\n      this.aim({\r\n        clientX: 320,\r\n        clientY: 300\r\n      })\r\n      // set up start drag event\r\n      this.zhezhao.addEventListener(\"mousedown\", this.draw)\r\n      // this.svg.addEventListener(\"mousedown\", this.draw)\r\n    },\r\n    methods: {\r\n      draw(e) {\r\n        // pull back arrow\r\n        console.log(123)\r\n        this.randomAngle = (Math.random() * Math.PI * 0.03) - 0.015\r\n        TweenMax.to(\".arrow-angle use\", 0.3, {\r\n          opacity: 1\r\n        })\r\n        window.addEventListener(\"mousemove\", this.aim)\r\n        window.addEventListener(\"mouseup\", this.loose)\r\n        this.aim(e)\r\n      },\r\n      aim(e) {\r\n        // get mouse position in relation to svg position and scale\r\n        var point = this.getMouseSVG(e);\r\n        point.x = Math.min(point.x, this.pivot.x - 7);\r\n        point.y = Math.max(point.y, this.pivot.y + 7);\r\n        var dx = point.x - this.pivot.x;\r\n        var dy = point.y - this.pivot.y;\r\n        // Make it more difficult by adding random angle each time\r\n        var angle = Math.atan2(dy, dx) + this.randomAngle;\r\n        var bowAngle = angle - Math.PI;\r\n        var distance = Math.min(Math.sqrt((dx * dx) + (dy * dy)), 50);\r\n        var scale = Math.min(Math.max(distance / 30, 1), 2);\r\n        TweenMax.to(\"#bow\", 0.3, {\r\n          scaleX: scale,\r\n          rotation: bowAngle + \"rad\",\r\n          transformOrigin: \"right center\"\r\n        });\r\n        var arrowX = Math.min(this.pivot.x - ((1 / scale) * distance), 88);\r\n        TweenMax.to(\".arrow-angle\", 0.3, {\r\n          rotation: bowAngle + \"rad\",\r\n          svgOrigin: \"100 250\"\r\n        });\r\n        TweenMax.to(\".arrow-angle use\", 0.3, {\r\n          x: -distance\r\n        });\r\n        TweenMax.to(\"#bow polyline\", 0.3, {\r\n          attr: {\r\n            points: \"88,200 \" + Math.min(this.pivot.x - ((1 / scale) * distance), 88) + \",250 88,300\"\r\n          }\r\n        });\r\n\r\n        var radius = distance * 9;\r\n        var offset = {\r\n          x: (Math.cos(bowAngle) * radius),\r\n          y: (Math.sin(bowAngle) * radius)\r\n        };\r\n        var arcWidth = offset.x * 3;\r\n\r\n        TweenMax.to(\"#arc\", 0.3, {\r\n          attr: {\r\n            d: \"M100,250c\" + offset.x + \",\" + offset.y + \",\" + (arcWidth - offset.x) + \",\" + (offset.y + 50) + \",\" +\r\n              arcWidth + \",50\"\r\n          },\r\n          autoAlpha: distance / 60\r\n        });\r\n      },\r\n      loose() {\r\n        // release arrow\r\n        window.removeEventListener(\"mousemove\", this.aim);\r\n        window.removeEventListener(\"mouseup\", this.loose);\r\n        TweenMax.to(\"#bow\", 0.4, {\r\n          scaleX: 1,\r\n          transformOrigin: \"right center\",\r\n          ease: Elastic.easeOut\r\n        });\r\n        TweenMax.to(\"#bow polyline\", 0.4, {\r\n          attr: {\r\n            points: \"88,200 88,250 88,300\"\r\n          },\r\n          ease: Elastic.easeOut\r\n        });\r\n        // duplicate arrow\r\n        var newArrow = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\r\n        newArrow.setAttributeNS('http://www.w3.org/1999/xlink', 'href', \"#arrow\");\r\n        this.arrows.appendChild(newArrow);\r\n        // animate arrow along path\r\n        var path = MorphSVGPlugin.pathDataToBezier(\"#arc\");\r\n        TweenMax.to([newArrow], 0.5, {\r\n          force3D: true,\r\n          bezier: {\r\n            type: \"cubic\",\r\n            values: path,\r\n            autoRotate: [\"x\", \"y\", \"rotation\"]\r\n          },\r\n          onUpdate: this.hitTest,\r\n          onUpdateParams: [\"{self}\"],\r\n          onComplete: this.onMiss,\r\n          ease: Linear.easeNone\r\n        });\r\n        TweenMax.to(\"#arc\", 0.3, {\r\n          opacity: 0\r\n        });\r\n        //hide previous arrow\r\n        TweenMax.set(\".arrow-angle use\", {\r\n          opacity: 0\r\n        });\r\n      },\r\n      hitTest(tween) {\r\n        // check for collisions with arrow and target\r\n        var arrow = tween.target[0];\r\n        var transform = arrow._gsTransform;\r\n        var radians = transform.rotation * Math.PI / 180;\r\n        var arrowSegment = {\r\n          x1: transform.x,\r\n          y1: transform.y,\r\n          x2: (Math.cos(radians) * 60) + transform.x,\r\n          y2: (Math.sin(radians) * 60) + transform.y\r\n        }\r\n        var intersection = this.getIntersection(arrowSegment, this.lineSegment);\r\n        if (intersection.segment1 && intersection.segment2) {\r\n          tween.pause();\r\n          var dx = intersection.x - this.target.x;\r\n          var dy = intersection.y - this.target.y;\r\n          var distance = Math.sqrt((dx * dx) + (dy * dy));\r\n          var selector = \".hit\";\r\n          if (distance < 7) {\r\n            selector = \".bullseye\"\r\n          }\r\n          this.showMessage(selector);\r\n        }\r\n      },\r\n      onMiss() {\r\n        // Damn!\r\n        this.showMessage(\".miss\");\r\n      },\r\n      showMessage(selector) {\r\n        // handle all text animations by providing selector\r\n        TweenMax.killTweensOf(selector);\r\n        TweenMax.killChildTweensOf(selector);\r\n        TweenMax.set(selector, {\r\n          autoAlpha: 1\r\n        });\r\n        TweenMax.staggerFromTo(selector + \" path\", .5, {\r\n          rotation: -5,\r\n          scale: 0,\r\n          transformOrigin: \"center\"\r\n        }, {\r\n          scale: 1,\r\n          ease: Back.easeOut\r\n        }, .05);\r\n        TweenMax.staggerTo(selector + \" path\", .3, {\r\n          delay: 2,\r\n          rotation: 20,\r\n          scale: 0,\r\n          ease: Back.easeIn\r\n        }, .03);\r\n      },\r\n      getMouseSVG(e) {\r\n        // normalize mouse position within svg coordinates\r\n        this.cursor.x = e.clientX;\r\n        this.cursor.y = e.clientY;\r\n        return this.cursor.matrixTransform(this.svg.getScreenCTM().inverse());\r\n      },\r\n      getIntersection(segment1, segment2) {\r\n        // find intersection point of two line segments and whether or not the point is on either line segment\r\n        var dx1 = segment1.x2 - segment1.x1;\r\n        var dy1 = segment1.y2 - segment1.y1;\r\n        var dx2 = segment2.x2 - segment2.x1;\r\n        var dy2 = segment2.y2 - segment2.y1;\r\n        var cx = segment1.x1 - segment2.x1;\r\n        var cy = segment1.y1 - segment2.y1;\r\n        var denominator = dy2 * dx1 - dx2 * dy1;\r\n        if (denominator == 0) {\r\n          return null;\r\n        }\r\n        var ua = (dx2 * cy - dy2 * cx) / denominator;\r\n        var ub = (dx1 * cy - dy1 * cx) / denominator;\r\n        return {\r\n          x: segment1.x1 + ua * dx1,\r\n          y: segment1.y1 + ua * dy1,\r\n          segment1: ua >= 0 && ua <= 1,\r\n          segment2: ub >= 0 && ub <= 1\r\n        };\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n  svg {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: fixed;\r\n    top: 15%;\r\n    left: 18%;\r\n    z-index: 99;\r\n    pointer-events: none\r\n  }\r\n\r\n  span {\r\n    color: white;\r\n    font-family: sans-serif;\r\n    opacity: .3;\r\n  }\r\n\r\n  .zhezhao {\r\n    width: 340px;\r\n    height: 500px;\r\n    position: fixed;\r\n    top: 500px;\r\n    left: 320px;\r\n  }\r\n</style>"]}]}